# Computes Manifest version for the extenions from a csv that was generated by the compute_stats_split.py script
# Usage: count_manifest.py --removed-extensions /path/to/csv --available-extensions /path/to/csv
import pandas as pd
from collections import Counter
import argparse

parser = argparse.ArgumentParser(
    description="counts the mainfest version from csv generated by the comupte_stats_split.py script"
)
parser.add_argument('--removed-extensions', required=True, help="The full path to the removed extenions CSV file generated by the compute_stats_split.py script.")
parser.add_argument('--available_extensions', required=True, help="The full path to the CSV still available extensions file generated by the compute_stats_split.py script")
args = parser.parse_args()

# Paths to the CSV files
files = {
    "permissions_removed.csv": args.removed_extensions,
    "permissions.csv": args.available_extensions
}

for name, path in files.items():
    # Load CSV
    df = pd.read_csv(path)

    # Ensure 'manifest_version' exists
    if "manifest_version" not in df.columns:
        print(f"Column 'manifest_version' not found in {name}")
        continue

    # Count occurrences
    counts = Counter(df["manifest_version"].dropna())

    # Print results
    print(f"\nResults for {name}:")
    for version, count in counts.items():
        print(f"  manifest_version={version}: {count}")
